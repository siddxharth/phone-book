{"ast":null,"code":"import React, { forwardRef, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { round } from '../Chart';\nimport { doublePad } from './utils';\nvar YAxis = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var values = _ref.values,\n      pad = _ref.pad,\n      renderValue = _ref.renderValue,\n      _ref$serie = _ref.serie,\n      serie = _ref$serie === void 0 ? {} : _ref$serie;\n  var theme = useContext(ThemeContext);\n  var render = serie.render,\n      suffix = serie.suffix;\n  var divideBy;\n  var unit;\n\n  if (!render && !suffix) {\n    // figure out how many digits to show\n    var maxValue = Math.max.apply(Math, values.map(function (v) {\n      return Math.abs(v);\n    }));\n\n    if (maxValue > 10000000) {\n      divideBy = 1000000;\n      unit = 'M';\n    } else if (maxValue > 10000) {\n      divideBy = 1000;\n      unit = 'K';\n    }\n  } // Set basis to match double the vertical pad, so we can align the\n  // text with the guides\n\n\n  var edgeSize = doublePad[pad.vertical || pad];\n  var basis = theme.global.edgeSize[edgeSize] || edgeSize;\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref,\n    gridArea: \"yAxis\",\n    justify: \"between\",\n    flex: true\n  }, values.map(function (axisValue, i) {\n    var content = renderValue(serie, undefined, axisValue);\n\n    if (content === axisValue) {\n      if (divideBy) content = round(content / divideBy, 0);\n      if (unit) content = \"\" + content + unit;\n    }\n\n    return /*#__PURE__*/React.createElement(Box // eslint-disable-next-line react/no-array-index-key\n    , {\n      key: i,\n      align: \"end\",\n      basis: basis,\n      flex: \"shrink\",\n      justify: basis ? 'center' : undefined\n    }, content);\n  }));\n});\nexport { YAxis };","map":{"version":3,"names":["React","forwardRef","useContext","ThemeContext","Box","round","doublePad","YAxis","_ref","ref","values","pad","renderValue","_ref$serie","serie","theme","render","suffix","divideBy","unit","maxValue","Math","max","apply","map","v","abs","edgeSize","vertical","basis","global","createElement","gridArea","justify","flex","axisValue","i","content","undefined","key","align"],"sources":["/Users/siddharthkhatri/Developer/React JS/phone-book/client/node_modules/grommet/es6/components/DataChart/YAxis.js"],"sourcesContent":["import React, { forwardRef, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { round } from '../Chart';\nimport { doublePad } from './utils';\nvar YAxis = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var values = _ref.values,\n      pad = _ref.pad,\n      renderValue = _ref.renderValue,\n      _ref$serie = _ref.serie,\n      serie = _ref$serie === void 0 ? {} : _ref$serie;\n  var theme = useContext(ThemeContext);\n  var render = serie.render,\n      suffix = serie.suffix;\n  var divideBy;\n  var unit;\n\n  if (!render && !suffix) {\n    // figure out how many digits to show\n    var maxValue = Math.max.apply(Math, values.map(function (v) {\n      return Math.abs(v);\n    }));\n\n    if (maxValue > 10000000) {\n      divideBy = 1000000;\n      unit = 'M';\n    } else if (maxValue > 10000) {\n      divideBy = 1000;\n      unit = 'K';\n    }\n  } // Set basis to match double the vertical pad, so we can align the\n  // text with the guides\n\n\n  var edgeSize = doublePad[pad.vertical || pad];\n  var basis = theme.global.edgeSize[edgeSize] || edgeSize;\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref,\n    gridArea: \"yAxis\",\n    justify: \"between\",\n    flex: true\n  }, values.map(function (axisValue, i) {\n    var content = renderValue(serie, undefined, axisValue);\n\n    if (content === axisValue) {\n      if (divideBy) content = round(content / divideBy, 0);\n      if (unit) content = \"\" + content + unit;\n    }\n\n    return /*#__PURE__*/React.createElement(Box // eslint-disable-next-line react/no-array-index-key\n    , {\n      key: i,\n      align: \"end\",\n      basis: basis,\n      flex: \"shrink\",\n      justify: basis ? 'center' : undefined\n    }, content);\n  }));\n});\nexport { YAxis };"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,QAA8C,OAA9C;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,SAAT,QAA0B,SAA1B;AACA,IAAIC,KAAK,GAAG,aAAaN,UAAU,CAAC,UAAUO,IAAV,EAAgBC,GAAhB,EAAqB;EACvD,IAAIC,MAAM,GAAGF,IAAI,CAACE,MAAlB;EAAA,IACIC,GAAG,GAAGH,IAAI,CAACG,GADf;EAAA,IAEIC,WAAW,GAAGJ,IAAI,CAACI,WAFvB;EAAA,IAGIC,UAAU,GAAGL,IAAI,CAACM,KAHtB;EAAA,IAIIA,KAAK,GAAGD,UAAU,KAAK,KAAK,CAApB,GAAwB,EAAxB,GAA6BA,UAJzC;EAKA,IAAIE,KAAK,GAAGb,UAAU,CAACC,YAAD,CAAtB;EACA,IAAIa,MAAM,GAAGF,KAAK,CAACE,MAAnB;EAAA,IACIC,MAAM,GAAGH,KAAK,CAACG,MADnB;EAEA,IAAIC,QAAJ;EACA,IAAIC,IAAJ;;EAEA,IAAI,CAACH,MAAD,IAAW,CAACC,MAAhB,EAAwB;IACtB;IACA,IAAIG,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAeF,IAAf,EAAqBX,MAAM,CAACc,GAAP,CAAW,UAAUC,CAAV,EAAa;MAC1D,OAAOJ,IAAI,CAACK,GAAL,CAASD,CAAT,CAAP;IACD,CAFmC,CAArB,CAAf;;IAIA,IAAIL,QAAQ,GAAG,QAAf,EAAyB;MACvBF,QAAQ,GAAG,OAAX;MACAC,IAAI,GAAG,GAAP;IACD,CAHD,MAGO,IAAIC,QAAQ,GAAG,KAAf,EAAsB;MAC3BF,QAAQ,GAAG,IAAX;MACAC,IAAI,GAAG,GAAP;IACD;EACF,CAzBsD,CAyBrD;EACF;;;EAGA,IAAIQ,QAAQ,GAAGrB,SAAS,CAACK,GAAG,CAACiB,QAAJ,IAAgBjB,GAAjB,CAAxB;EACA,IAAIkB,KAAK,GAAGd,KAAK,CAACe,MAAN,CAAaH,QAAb,CAAsBA,QAAtB,KAAmCA,QAA/C;EACA,OAAO,aAAa3B,KAAK,CAAC+B,aAAN,CAAoB3B,GAApB,EAAyB;IAC3CK,GAAG,EAAEA,GADsC;IAE3CuB,QAAQ,EAAE,OAFiC;IAG3CC,OAAO,EAAE,SAHkC;IAI3CC,IAAI,EAAE;EAJqC,CAAzB,EAKjBxB,MAAM,CAACc,GAAP,CAAW,UAAUW,SAAV,EAAqBC,CAArB,EAAwB;IACpC,IAAIC,OAAO,GAAGzB,WAAW,CAACE,KAAD,EAAQwB,SAAR,EAAmBH,SAAnB,CAAzB;;IAEA,IAAIE,OAAO,KAAKF,SAAhB,EAA2B;MACzB,IAAIjB,QAAJ,EAAcmB,OAAO,GAAGhC,KAAK,CAACgC,OAAO,GAAGnB,QAAX,EAAqB,CAArB,CAAf;MACd,IAAIC,IAAJ,EAAUkB,OAAO,GAAG,KAAKA,OAAL,GAAelB,IAAzB;IACX;;IAED,OAAO,aAAanB,KAAK,CAAC+B,aAAN,CAAoB3B,GAApB,CAAwB;IAAxB,EAClB;MACAmC,GAAG,EAAEH,CADL;MAEAI,KAAK,EAAE,KAFP;MAGAX,KAAK,EAAEA,KAHP;MAIAK,IAAI,EAAE,QAJN;MAKAD,OAAO,EAAEJ,KAAK,GAAG,QAAH,GAAcS;IAL5B,CADkB,EAOjBD,OAPiB,CAApB;EAQD,CAhBE,CALiB,CAApB;AAsBD,CArDkC,CAAnC;AAsDA,SAAS9B,KAAT"},"metadata":{},"sourceType":"module"}