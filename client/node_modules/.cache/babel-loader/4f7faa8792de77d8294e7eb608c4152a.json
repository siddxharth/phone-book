{"ast":null,"code":"// Returns the specific color that should be used according to the theme.\n// If 'dark' is supplied, it takes precedence over 'theme.dark'.\n// Can return undefined.\nexport var normalizeColor = function normalizeColor(color, theme, dark) {\n  var colorSpec = theme.global && theme.global.colors[color] !== undefined ? theme.global.colors[color] : color; // If the color has a light or dark object, use that\n\n  var result = colorSpec;\n\n  if (colorSpec) {\n    if ((dark === true || dark === undefined && theme.dark) && colorSpec.dark !== undefined) {\n      result = colorSpec.dark;\n    } else if ((dark === false || !theme.dark) && colorSpec.light !== undefined) {\n      result = colorSpec.light;\n    }\n  } // allow one level of indirection in color names\n\n\n  if (result && theme.global && theme.global.colors[result] !== undefined) {\n    result = normalizeColor(result, theme, dark);\n  }\n\n  return result;\n};\n\nvar parseHexToRGB = function parseHexToRGB(color) {\n  return color.length < 7 // 7 is what's needed for '#RRGGBB'\n  ? color.match(/[A-Za-z0-9]{1}/g).map(function (v) {\n    return parseInt(\"\" + v + v, 16);\n  }) : // https://stackoverflow.com/a/42429333\n  color.match(/[A-Za-z0-9]{2}/g).map(function (v) {\n    return parseInt(v, 16);\n  });\n}; // From: https://stackoverflow.com/a/9493060/8513067\n// Converts an HSL color value to RGB. Conversion formula\n// adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n// Assumes h, s, and l are contained in the set [0, 1] and\n// returns r, g, and b in the set [0, 255].\n\n\nvar hslToRGB = function hslToRGB(h, s, l) {\n  var r;\n  var g;\n  var b;\n\n  if (s === 0 || s === '0') {\n    // achromatic\n    r = l;\n    g = l;\n    b = l;\n  } else {\n    var hue2rgb = function hue2rgb(p, q, inT) {\n      var t = inT;\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 0.16666667) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 0.66666667) return p + (q - p) * (0.66666667 - t) * 6;\n      return p;\n    };\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 0.33333333);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 0.33333333);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}; // allow for alpha: #RGB, #RGBA, #RRGGBB, or #RRGGBBAA\n\n\nvar hexExp = /^#[A-Za-z0-9]{3,4}$|^#[A-Za-z0-9]{6,8}$/;\nvar rgbExp = /^rgba?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?\\)/;\nvar rgbaExp = /^rgba?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?,\\s?([.0-9]*)\\s?\\)/; // e.g. hsl(240, 60%, 50%)\n\nvar hslExp = /^hsla?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)%?\\s?,\\s?([0-9]*)%?\\s?.*?\\)/;\n\nvar canExtractRGBArray = function canExtractRGBArray(color) {\n  return hexExp.test(color) || rgbExp.test(color) || rgbaExp.test(color) || hslExp.test(color);\n};\n\nvar getRGBArray = function getRGBArray(color) {\n  if (hexExp.test(color)) {\n    var _parseHexToRGB = parseHexToRGB(color),\n        red = _parseHexToRGB[0],\n        green = _parseHexToRGB[1],\n        blue = _parseHexToRGB[2],\n        alpha = _parseHexToRGB[3];\n\n    return [red, green, blue, alpha !== undefined ? alpha / 255.0 : undefined];\n  }\n\n  var match = color.match(rgbExp);\n\n  if (match) {\n    return match.splice(1).map(function (v) {\n      return parseInt(v, 10);\n    });\n  }\n\n  match = color.match(rgbaExp);\n\n  if (match) {\n    return match.splice(1).map(function (v) {\n      return parseFloat(v, 10);\n    });\n  }\n\n  match = color.match(hslExp);\n\n  if (match) {\n    var _match$splice$map = match.splice(1).map(function (v) {\n      return parseInt(v, 10);\n    }),\n        h = _match$splice$map[0],\n        s = _match$splice$map[1],\n        l = _match$splice$map[2];\n\n    return hslToRGB(h / 360.0, s / 100.0, l / 100.0);\n  }\n\n  return color;\n};\n\nexport var colorIsDark = function colorIsDark(color) {\n  if (color && canExtractRGBArray(color)) {\n    var _getRGBArray = getRGBArray(color),\n        red = _getRGBArray[0],\n        green = _getRGBArray[1],\n        blue = _getRGBArray[2],\n        alpha = _getRGBArray[3]; // if there is an alpha and it's greater than 50%, we can't really tell\n\n\n    if (alpha < 0.5) return undefined;\n    var brightness = (299 * red + 587 * green + 114 * blue) / 1000; // From: http://www.had2know.com/technology/color-contrast-calculator-web-design.html\n    // Above domain is no longer registered.\n\n    return brightness < 125;\n  }\n\n  return undefined;\n};\nexport var getRGBA = function getRGBA(color, opacity) {\n  if (color && canExtractRGBArray(color)) {\n    var _getRGBArray2 = getRGBArray(color),\n        red = _getRGBArray2[0],\n        green = _getRGBArray2[1],\n        blue = _getRGBArray2[2],\n        alpha = _getRGBArray2[3];\n\n    var normalizedAlpha;\n\n    if (opacity !== undefined) {\n      normalizedAlpha = opacity;\n    } else if (alpha !== undefined) {\n      normalizedAlpha = alpha;\n    } else {\n      normalizedAlpha = 1;\n    }\n\n    return \"rgba(\" + red + \", \" + green + \", \" + blue + \", \" + normalizedAlpha + \")\";\n  }\n\n  return undefined;\n};","map":{"version":3,"names":["normalizeColor","color","theme","dark","colorSpec","global","colors","undefined","result","light","parseHexToRGB","length","match","map","v","parseInt","hslToRGB","h","s","l","r","g","b","hue2rgb","p","q","inT","t","Math","round","hexExp","rgbExp","rgbaExp","hslExp","canExtractRGBArray","test","getRGBArray","_parseHexToRGB","red","green","blue","alpha","splice","parseFloat","_match$splice$map","colorIsDark","_getRGBArray","brightness","getRGBA","opacity","_getRGBArray2","normalizedAlpha"],"sources":["/Users/siddharthkhatri/Developer/React JS/phone-book/node_modules/grommet/es6/utils/colors.js"],"sourcesContent":["// Returns the specific color that should be used according to the theme.\n// If 'dark' is supplied, it takes precedence over 'theme.dark'.\n// Can return undefined.\nexport var normalizeColor = function normalizeColor(color, theme, dark) {\n  var colorSpec = theme.global && theme.global.colors[color] !== undefined ? theme.global.colors[color] : color; // If the color has a light or dark object, use that\n\n  var result = colorSpec;\n\n  if (colorSpec) {\n    if ((dark === true || dark === undefined && theme.dark) && colorSpec.dark !== undefined) {\n      result = colorSpec.dark;\n    } else if ((dark === false || !theme.dark) && colorSpec.light !== undefined) {\n      result = colorSpec.light;\n    }\n  } // allow one level of indirection in color names\n\n\n  if (result && theme.global && theme.global.colors[result] !== undefined) {\n    result = normalizeColor(result, theme, dark);\n  }\n\n  return result;\n};\n\nvar parseHexToRGB = function parseHexToRGB(color) {\n  return color.length < 7 // 7 is what's needed for '#RRGGBB'\n  ? color.match(/[A-Za-z0-9]{1}/g).map(function (v) {\n    return parseInt(\"\" + v + v, 16);\n  }) : // https://stackoverflow.com/a/42429333\n  color.match(/[A-Za-z0-9]{2}/g).map(function (v) {\n    return parseInt(v, 16);\n  });\n}; // From: https://stackoverflow.com/a/9493060/8513067\n// Converts an HSL color value to RGB. Conversion formula\n// adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n// Assumes h, s, and l are contained in the set [0, 1] and\n// returns r, g, and b in the set [0, 255].\n\n\nvar hslToRGB = function hslToRGB(h, s, l) {\n  var r;\n  var g;\n  var b;\n\n  if (s === 0 || s === '0') {\n    // achromatic\n    r = l;\n    g = l;\n    b = l;\n  } else {\n    var hue2rgb = function hue2rgb(p, q, inT) {\n      var t = inT;\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 0.16666667) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 0.66666667) return p + (q - p) * (0.66666667 - t) * 6;\n      return p;\n    };\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 0.33333333);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 0.33333333);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}; // allow for alpha: #RGB, #RGBA, #RRGGBB, or #RRGGBBAA\n\n\nvar hexExp = /^#[A-Za-z0-9]{3,4}$|^#[A-Za-z0-9]{6,8}$/;\nvar rgbExp = /^rgba?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?\\)/;\nvar rgbaExp = /^rgba?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?,\\s?([.0-9]*)\\s?\\)/; // e.g. hsl(240, 60%, 50%)\n\nvar hslExp = /^hsla?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)%?\\s?,\\s?([0-9]*)%?\\s?.*?\\)/;\n\nvar canExtractRGBArray = function canExtractRGBArray(color) {\n  return hexExp.test(color) || rgbExp.test(color) || rgbaExp.test(color) || hslExp.test(color);\n};\n\nvar getRGBArray = function getRGBArray(color) {\n  if (hexExp.test(color)) {\n    var _parseHexToRGB = parseHexToRGB(color),\n        red = _parseHexToRGB[0],\n        green = _parseHexToRGB[1],\n        blue = _parseHexToRGB[2],\n        alpha = _parseHexToRGB[3];\n\n    return [red, green, blue, alpha !== undefined ? alpha / 255.0 : undefined];\n  }\n\n  var match = color.match(rgbExp);\n\n  if (match) {\n    return match.splice(1).map(function (v) {\n      return parseInt(v, 10);\n    });\n  }\n\n  match = color.match(rgbaExp);\n\n  if (match) {\n    return match.splice(1).map(function (v) {\n      return parseFloat(v, 10);\n    });\n  }\n\n  match = color.match(hslExp);\n\n  if (match) {\n    var _match$splice$map = match.splice(1).map(function (v) {\n      return parseInt(v, 10);\n    }),\n        h = _match$splice$map[0],\n        s = _match$splice$map[1],\n        l = _match$splice$map[2];\n\n    return hslToRGB(h / 360.0, s / 100.0, l / 100.0);\n  }\n\n  return color;\n};\n\nexport var colorIsDark = function colorIsDark(color) {\n  if (color && canExtractRGBArray(color)) {\n    var _getRGBArray = getRGBArray(color),\n        red = _getRGBArray[0],\n        green = _getRGBArray[1],\n        blue = _getRGBArray[2],\n        alpha = _getRGBArray[3]; // if there is an alpha and it's greater than 50%, we can't really tell\n\n\n    if (alpha < 0.5) return undefined;\n    var brightness = (299 * red + 587 * green + 114 * blue) / 1000; // From: http://www.had2know.com/technology/color-contrast-calculator-web-design.html\n    // Above domain is no longer registered.\n\n    return brightness < 125;\n  }\n\n  return undefined;\n};\nexport var getRGBA = function getRGBA(color, opacity) {\n  if (color && canExtractRGBArray(color)) {\n    var _getRGBArray2 = getRGBArray(color),\n        red = _getRGBArray2[0],\n        green = _getRGBArray2[1],\n        blue = _getRGBArray2[2],\n        alpha = _getRGBArray2[3];\n\n    var normalizedAlpha;\n\n    if (opacity !== undefined) {\n      normalizedAlpha = opacity;\n    } else if (alpha !== undefined) {\n      normalizedAlpha = alpha;\n    } else {\n      normalizedAlpha = 1;\n    }\n\n    return \"rgba(\" + red + \", \" + green + \", \" + blue + \", \" + normalizedAlpha + \")\";\n  }\n\n  return undefined;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}