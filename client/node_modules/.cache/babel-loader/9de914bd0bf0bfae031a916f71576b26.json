{"ast":null,"code":"import { normalizeValues } from './utils';\nvar thicknessPad = {\n  xlarge: 'large',\n  large: 'medium',\n  medium: 'small',\n  small: 'xsmall',\n  xsmall: 'xxsmall'\n};\nexport var round = function round(value, decimals) {\n  return Number(Math.round(value + \"e\" + decimals) + \"e-\" + decimals);\n};\n\nvar alignMax = function alignMax(value, interval) {\n  if (value > 0) return value - value % interval + interval;\n  if (value < 0) return value + value % interval;\n  return value;\n};\n\nvar alignMin = function alignMin(value, interval) {\n  if (value > 0) return value - value % interval;\n  if (value < 0) return value - value % interval - interval;\n  return value;\n};\n\nexport var calcBounds = function calcBounds(values, options) {\n  if (options === void 0) {\n    options = {};\n  } // coarseness influences the rounding of the bounds, the smaller the\n  // number, the more the bounds will be rounded. e.g. 111 -> 110 -> 100\n  // Normalize to an array. Backwards compatible has no coarseness for x-axis\n\n\n  var coarseness = Array.isArray(options.coarseness) && options.coarseness || options.coarseness && [undefined, options.coarseness] || [undefined, 5];\n  var coarseX = coarseness[0],\n      coarseY = coarseness[1]; // the number of steps is one less than the number of labels\n\n  var steps = options.steps || [1, 1];\n  var stepsY = steps[1];\n  var calcValues = normalizeValues(values || []); // min and max values\n\n  var minX;\n  var maxX;\n  var minY;\n  var maxY;\n\n  if (calcValues.length) {\n    // Calculate the max and min values.\n    calcValues.filter(function (value) {\n      return value !== undefined;\n    }).forEach(function (value) {\n      var x = value.value[0];\n\n      if (x !== undefined) {\n        minX = minX === undefined ? x : Math.min(minX, x);\n        maxX = maxX === undefined ? x : Math.max(maxX, x);\n      }\n\n      var y = value.value[1];\n\n      if (y !== undefined) {\n        minY = minY === undefined ? y : Math.min(minY, y);\n        maxY = maxY === undefined ? y : Math.max(maxY, y);\n      } // handle ranges of values\n\n\n      var y2 = value.value[2];\n\n      if (y2 !== undefined) {\n        minY = Math.min(minY, y2);\n        maxY = Math.max(maxY, y2);\n      }\n    }); // when max === min, offset them so we can show something\n\n    if (maxX === minX) {\n      if (maxX > 0) minX = maxX - 1;else maxX = minX + 1;\n    }\n\n    if (maxY === minY) {\n      if (maxY > 0) minY = maxY - 1;else maxY = minY + 1;\n    } // Calculate some reasonable bounds based on the max and min values.\n    // This is so values like 87342.12 don't end up being displayed as the\n    // graph axis labels.\n\n\n    if (coarseX) {\n      var deltaX = maxX - minX;\n      var intervalX = Number.parseFloat((deltaX / coarseX).toPrecision(1));\n      minX = alignMin(minX, intervalX);\n      maxX = alignMax(maxX, intervalX);\n    }\n\n    if (coarseY) {\n      var deltaY = maxY - minY;\n      var intervalY = Number.parseFloat((deltaY / coarseY).toPrecision(1));\n      minY = alignMin(minY, intervalY);\n      maxY = alignMax(maxY, intervalY);\n    }\n\n    if (minY < 0 && maxY > 0 && Math.abs(minY) !== Math.abs(maxY)) {\n      // Adjust min and max when crossing 0 to ensure 0 will be shown on\n      // the Y axis based on the number of steps.\n      if (stepsY === 1) {\n        var largest = Math.max(Math.abs(minY), Math.abs(maxY));\n        minY = -largest;\n        maxY = largest;\n      } else {\n        var stepInterval = (maxY - minY) / stepsY;\n        var minSteps = minY / stepInterval;\n        var maxSteps = maxY / stepInterval;\n\n        if (Math.abs(minSteps) < Math.abs(maxSteps)) {\n          // more above than below\n          stepInterval = maxY / Math.floor(maxSteps);\n          maxY = stepInterval * Math.floor(maxSteps);\n          minY = stepInterval * Math.floor(minSteps);\n        } else {\n          // more below than above\n          stepInterval = Math.abs(minY / Math.ceil(minSteps));\n          minY = stepInterval * Math.ceil(minSteps);\n          maxY = stepInterval * Math.ceil(maxSteps);\n        }\n      }\n    }\n  }\n\n  var bounds;\n  if (calcValues.length) bounds = [[minX, maxX], [minY, maxY]];else bounds = [[], []];\n  return bounds;\n};\nexport var calcs = function calcs(values, options) {\n  if (values === void 0) {\n    values = [];\n  }\n\n  if (options === void 0) {\n    options = {};\n  } // the number of steps is one less than the number of labels\n\n\n  var steps = options.steps || [1, 1];\n  var stepsX = steps[0],\n      stepsY = steps[1];\n  var bounds = options.bounds || calcBounds(values, options);\n  if (options.min !== undefined) bounds[1][0] = options.min;\n  if (options.max !== undefined) bounds[1][1] = options.max;\n  var boundsX = bounds[0],\n      boundsY = bounds[1];\n  var boundsXmin = boundsX[0],\n      boundsXmax = boundsX[1];\n  var boundsYmin = boundsY[0],\n      boundsYmax = boundsY[1];\n  var dimensions = [round(boundsXmax - boundsXmin, 2), round(boundsYmax - boundsYmin, 2)];\n  var dimensionsX = dimensions[0],\n      dimensionsY = dimensions[1]; // Calculate x and y axis values across the specfied number of steps.\n\n  var yAxis = [];\n  var y = boundsYmax; // To deal with javascript math limitations, round the step with 4 decimal\n  // places and then push the values with 2 decimal places\n\n  var yStepInterval = round(dimensionsY / stepsY, 4);\n\n  while (round(y, 2) >= boundsYmin) {\n    yAxis.push(round(y, 2));\n    y -= yStepInterval;\n  }\n\n  var xAxis = [];\n  var x = boundsXmin;\n  var xStepInterval = round(dimensionsX / stepsX, 4);\n\n  while (round(x, 2) <= boundsXmax) {\n    xAxis.push(round(x, 2));\n    x += xStepInterval;\n  }\n\n  var _options = options,\n      thickness = _options.thickness;\n\n  if (!thickness) {\n    // Set bar thickness based on number of values being rendered.\n    // Someday, it would be better to include the actual rendered size.\n    // These values were emirically determined, trying to balance visibility\n    // and overlap across resolutions.\n    if (values.length < 5) {\n      thickness = 'xlarge';\n    } else if (values.length < 11) {\n      thickness = 'large';\n    } else if (values.length < 21) {\n      thickness = 'medium';\n    } else if (values.length < 61) {\n      thickness = 'small';\n    } else if (values.length < 121) {\n      thickness = 'xsmall';\n    } else {\n      thickness = 'hair';\n    }\n  }\n\n  var pad = thicknessPad[thickness];\n  return {\n    axis: [xAxis, yAxis],\n    bounds: bounds,\n    dimensions: dimensions,\n    pad: pad,\n    thickness: thickness\n  };\n};","map":{"version":3,"names":["normalizeValues","thicknessPad","xlarge","large","medium","small","xsmall","round","value","decimals","Number","Math","alignMax","interval","alignMin","calcBounds","values","options","coarseness","Array","isArray","undefined","coarseX","coarseY","steps","stepsY","calcValues","minX","maxX","minY","maxY","length","filter","forEach","x","min","max","y","y2","deltaX","intervalX","parseFloat","toPrecision","deltaY","intervalY","abs","largest","stepInterval","minSteps","maxSteps","floor","ceil","bounds","calcs","stepsX","boundsX","boundsY","boundsXmin","boundsXmax","boundsYmin","boundsYmax","dimensions","dimensionsX","dimensionsY","yAxis","yStepInterval","push","xAxis","xStepInterval","_options","thickness","pad","axis"],"sources":["/Users/siddharthkhatri/Developer/React JS/phone-book/node_modules/grommet/es6/components/Chart/calcs.js"],"sourcesContent":["import { normalizeValues } from './utils';\nvar thicknessPad = {\n  xlarge: 'large',\n  large: 'medium',\n  medium: 'small',\n  small: 'xsmall',\n  xsmall: 'xxsmall'\n};\nexport var round = function round(value, decimals) {\n  return Number(Math.round(value + \"e\" + decimals) + \"e-\" + decimals);\n};\n\nvar alignMax = function alignMax(value, interval) {\n  if (value > 0) return value - value % interval + interval;\n  if (value < 0) return value + value % interval;\n  return value;\n};\n\nvar alignMin = function alignMin(value, interval) {\n  if (value > 0) return value - value % interval;\n  if (value < 0) return value - value % interval - interval;\n  return value;\n};\n\nexport var calcBounds = function calcBounds(values, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  // coarseness influences the rounding of the bounds, the smaller the\n  // number, the more the bounds will be rounded. e.g. 111 -> 110 -> 100\n  // Normalize to an array. Backwards compatible has no coarseness for x-axis\n  var coarseness = Array.isArray(options.coarseness) && options.coarseness || options.coarseness && [undefined, options.coarseness] || [undefined, 5];\n  var coarseX = coarseness[0],\n      coarseY = coarseness[1]; // the number of steps is one less than the number of labels\n\n  var steps = options.steps || [1, 1];\n  var stepsY = steps[1];\n  var calcValues = normalizeValues(values || []); // min and max values\n\n  var minX;\n  var maxX;\n  var minY;\n  var maxY;\n\n  if (calcValues.length) {\n    // Calculate the max and min values.\n    calcValues.filter(function (value) {\n      return value !== undefined;\n    }).forEach(function (value) {\n      var x = value.value[0];\n\n      if (x !== undefined) {\n        minX = minX === undefined ? x : Math.min(minX, x);\n        maxX = maxX === undefined ? x : Math.max(maxX, x);\n      }\n\n      var y = value.value[1];\n\n      if (y !== undefined) {\n        minY = minY === undefined ? y : Math.min(minY, y);\n        maxY = maxY === undefined ? y : Math.max(maxY, y);\n      } // handle ranges of values\n\n\n      var y2 = value.value[2];\n\n      if (y2 !== undefined) {\n        minY = Math.min(minY, y2);\n        maxY = Math.max(maxY, y2);\n      }\n    }); // when max === min, offset them so we can show something\n\n    if (maxX === minX) {\n      if (maxX > 0) minX = maxX - 1;else maxX = minX + 1;\n    }\n\n    if (maxY === minY) {\n      if (maxY > 0) minY = maxY - 1;else maxY = minY + 1;\n    } // Calculate some reasonable bounds based on the max and min values.\n    // This is so values like 87342.12 don't end up being displayed as the\n    // graph axis labels.\n\n\n    if (coarseX) {\n      var deltaX = maxX - minX;\n      var intervalX = Number.parseFloat((deltaX / coarseX).toPrecision(1));\n      minX = alignMin(minX, intervalX);\n      maxX = alignMax(maxX, intervalX);\n    }\n\n    if (coarseY) {\n      var deltaY = maxY - minY;\n      var intervalY = Number.parseFloat((deltaY / coarseY).toPrecision(1));\n      minY = alignMin(minY, intervalY);\n      maxY = alignMax(maxY, intervalY);\n    }\n\n    if (minY < 0 && maxY > 0 && Math.abs(minY) !== Math.abs(maxY)) {\n      // Adjust min and max when crossing 0 to ensure 0 will be shown on\n      // the Y axis based on the number of steps.\n      if (stepsY === 1) {\n        var largest = Math.max(Math.abs(minY), Math.abs(maxY));\n        minY = -largest;\n        maxY = largest;\n      } else {\n        var stepInterval = (maxY - minY) / stepsY;\n        var minSteps = minY / stepInterval;\n        var maxSteps = maxY / stepInterval;\n\n        if (Math.abs(minSteps) < Math.abs(maxSteps)) {\n          // more above than below\n          stepInterval = maxY / Math.floor(maxSteps);\n          maxY = stepInterval * Math.floor(maxSteps);\n          minY = stepInterval * Math.floor(minSteps);\n        } else {\n          // more below than above\n          stepInterval = Math.abs(minY / Math.ceil(minSteps));\n          minY = stepInterval * Math.ceil(minSteps);\n          maxY = stepInterval * Math.ceil(maxSteps);\n        }\n      }\n    }\n  }\n\n  var bounds;\n  if (calcValues.length) bounds = [[minX, maxX], [minY, maxY]];else bounds = [[], []];\n  return bounds;\n};\nexport var calcs = function calcs(values, options) {\n  if (values === void 0) {\n    values = [];\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  // the number of steps is one less than the number of labels\n  var steps = options.steps || [1, 1];\n  var stepsX = steps[0],\n      stepsY = steps[1];\n  var bounds = options.bounds || calcBounds(values, options);\n  if (options.min !== undefined) bounds[1][0] = options.min;\n  if (options.max !== undefined) bounds[1][1] = options.max;\n  var boundsX = bounds[0],\n      boundsY = bounds[1];\n  var boundsXmin = boundsX[0],\n      boundsXmax = boundsX[1];\n  var boundsYmin = boundsY[0],\n      boundsYmax = boundsY[1];\n  var dimensions = [round(boundsXmax - boundsXmin, 2), round(boundsYmax - boundsYmin, 2)];\n  var dimensionsX = dimensions[0],\n      dimensionsY = dimensions[1]; // Calculate x and y axis values across the specfied number of steps.\n\n  var yAxis = [];\n  var y = boundsYmax; // To deal with javascript math limitations, round the step with 4 decimal\n  // places and then push the values with 2 decimal places\n\n  var yStepInterval = round(dimensionsY / stepsY, 4);\n\n  while (round(y, 2) >= boundsYmin) {\n    yAxis.push(round(y, 2));\n    y -= yStepInterval;\n  }\n\n  var xAxis = [];\n  var x = boundsXmin;\n  var xStepInterval = round(dimensionsX / stepsX, 4);\n\n  while (round(x, 2) <= boundsXmax) {\n    xAxis.push(round(x, 2));\n    x += xStepInterval;\n  }\n\n  var _options = options,\n      thickness = _options.thickness;\n\n  if (!thickness) {\n    // Set bar thickness based on number of values being rendered.\n    // Someday, it would be better to include the actual rendered size.\n    // These values were emirically determined, trying to balance visibility\n    // and overlap across resolutions.\n    if (values.length < 5) {\n      thickness = 'xlarge';\n    } else if (values.length < 11) {\n      thickness = 'large';\n    } else if (values.length < 21) {\n      thickness = 'medium';\n    } else if (values.length < 61) {\n      thickness = 'small';\n    } else if (values.length < 121) {\n      thickness = 'xsmall';\n    } else {\n      thickness = 'hair';\n    }\n  }\n\n  var pad = thicknessPad[thickness];\n  return {\n    axis: [xAxis, yAxis],\n    bounds: bounds,\n    dimensions: dimensions,\n    pad: pad,\n    thickness: thickness\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}