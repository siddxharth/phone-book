{"ast":null,"code":"import * as t from \"react\";\n\nfunction e() {\n  return (e = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n\n      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);\n    }\n\n    return t;\n  }).apply(this, arguments);\n}\n\nconst n = [\"children\", \"options\"],\n      r = [\"allowFullScreen\", \"allowTransparency\", \"autoComplete\", \"autoFocus\", \"autoPlay\", \"cellPadding\", \"cellSpacing\", \"charSet\", \"className\", \"classId\", \"colSpan\", \"contentEditable\", \"contextMenu\", \"crossOrigin\", \"encType\", \"formAction\", \"formEncType\", \"formMethod\", \"formNoValidate\", \"formTarget\", \"frameBorder\", \"hrefLang\", \"inputMode\", \"keyParams\", \"keyType\", \"marginHeight\", \"marginWidth\", \"maxLength\", \"mediaGroup\", \"minLength\", \"noValidate\", \"radioGroup\", \"readOnly\", \"rowSpan\", \"spellCheck\", \"srcDoc\", \"srcLang\", \"srcSet\", \"tabIndex\", \"useMap\"].reduce((t, e) => (t[e.toLowerCase()] = e, t), {\n  for: \"htmlFor\"\n}),\n      o = {\n  amp: \"&\",\n  apos: \"'\",\n  gt: \">\",\n  lt: \"<\",\n  nbsp: \" \",\n  quot: \"“\"\n},\n      c = [\"style\", \"script\"],\n      a = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n      u = /mailto:/i,\n      i = /\\n{2,}$/,\n      l = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/,\n      s = /^ *> ?/gm,\n      _ = /^ {2,}\\n/,\n      f = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/,\n      d = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/,\n      p = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n      g = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n      m = /^(?:\\n *)*\\n/,\n      y = /\\r\\n?/g,\n      h = /^\\[\\^([^\\]]+)](:.*)\\n/,\n      k = /^\\[\\^([^\\]]+)]/,\n      x = /\\f/g,\n      b = /^\\s*?\\[(x|\\s)\\]/,\n      v = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n      S = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n      $ = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i,\n      w = /&([a-z]+);/g,\n      z = /^<!--[\\s\\S]*?(?:-->)/,\n      E = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n      A = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n      R = /^\\{.*\\}$/,\n      I = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n      M = /^<([^ >]+@[^ >]+)>/,\n      O = /^<([^ >]+:\\/[^ >]+)>/,\n      B = / *\\n+$/,\n      L = /(?:^|\\n)( *)$/,\n      T = /-([a-z])?/gi,\n      j = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/,\n      C = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/,\n      D = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n      N = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n      Z = /(\\[|\\])/g,\n      F = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n      P = /\\t/g,\n      G = /^ *\\| */,\n      H = /(^ *\\||\\| *$)/g,\n      q = / *$/,\n      U = /^ *:-+: *$/,\n      V = /^ *:-+ *$/,\n      W = /^ *-+: *$/,\n      Q = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/,\n      X = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/,\n      J = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,\n      K = /^\\\\([^0-9A-Za-z\\s])/,\n      Y = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,\n      tt = /^\\n+/,\n      et = /^([ \\t]*)/,\n      nt = /\\\\([^0-9A-Z\\s])/gi,\n      rt = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) +\"),\n      ot = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) +[^\\\\n]*(?:\\\\n(?!\\\\1(?:[*+-]|\\\\d+\\\\.) )[^\\\\n]*)*(\\\\n|$)\", \"gm\"),\n      ct = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1(?:[*+-]|\\\\d+\\\\.) (?!(?:[*+-]|\\\\d+\\\\.) ))\\\\n*|\\\\s*\\\\n*$)\"),\n      at = \"(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*\",\n      ut = new RegExp(\"^\\\\[(\" + at + \")\\\\]\\\\(\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n      it = new RegExp(\"^!\\\\[(\" + at + \")\\\\]\\\\(\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n      lt = [l, p, d, v, S, z, ot, ct, j],\n      st = [...lt, /^[^\\n]+(?:  \\n|\\n{2,})/, $, A];\n\nfunction _t(t) {\n  return t.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\n\nfunction ft(t) {\n  return W.test(t) ? \"right\" : U.test(t) ? \"center\" : V.test(t) ? \"left\" : null;\n}\n\nfunction dt(t, e, n) {\n  const r = n.t;\n  n.t = !0;\n  const o = e(t.trim(), n);\n  n.t = r;\n  let c = [[]];\n  return o.forEach(function (t, e) {\n    \"tableSeparator\" === t.type ? 0 !== e && e !== o.length - 1 && c.push([]) : (\"text\" !== t.type || null != o[e + 1] && \"tableSeparator\" !== o[e + 1].type || (t.content = t.content.replace(q, \"\")), c[c.length - 1].push(t));\n  }), c;\n}\n\nfunction pt(t, e, n) {\n  n.o = !0;\n\n  const r = dt(t[1], e, n),\n        o = t[2].replace(H, \"\").split(\"|\").map(ft),\n        c = function (t, e, n) {\n    return t.trim().split(\"\\n\").map(function (t) {\n      return dt(t, e, n);\n    });\n  }(t[3], e, n);\n\n  return n.o = !1, {\n    align: o,\n    cells: c,\n    header: r,\n    type: \"table\"\n  };\n}\n\nfunction gt(t, e) {\n  return null == t.align[e] ? {} : {\n    textAlign: t.align[e]\n  };\n}\n\nfunction mt(t) {\n  return function (e, n) {\n    return n.o ? t.exec(e) : null;\n  };\n}\n\nfunction yt(t) {\n  return function (e, n) {\n    return n.o || n.u ? t.exec(e) : null;\n  };\n}\n\nfunction ht(t) {\n  return function (e, n) {\n    return n.o || n.u ? null : t.exec(e);\n  };\n}\n\nfunction kt(t) {\n  return function (e) {\n    return t.exec(e);\n  };\n}\n\nfunction xt(t, e, n) {\n  if (e.o || e.u) return null;\n  if (n && !n.endsWith(\"\\n\")) return null;\n  let r = \"\";\n  t.split(\"\\n\").every(t => !lt.some(e => e.test(t)) && (r += t + \"\\n\", t.trim()));\n  const o = r.trimEnd();\n  return \"\" == o ? null : [r, o];\n}\n\nfunction bt(t) {\n  try {\n    if (decodeURIComponent(t).replace(/[^A-Za-z0-9/:]/g, \"\").match(/^\\s*(javascript|vbscript|data):/i)) return null;\n  } catch (t) {\n    return null;\n  }\n\n  return t;\n}\n\nfunction vt(t) {\n  return t.replace(nt, \"$1\");\n}\n\nfunction St(t, e, n) {\n  const r = n.o || !1,\n        o = n.u || !1;\n  n.o = !0, n.u = !0;\n  const c = t(e, n);\n  return n.o = r, n.u = o, c;\n}\n\nfunction $t(t, e, n) {\n  const r = n.o || !1,\n        o = n.u || !1;\n  n.o = !1, n.u = !0;\n  const c = t(e, n);\n  return n.o = r, n.u = o, c;\n}\n\nfunction wt(t, e, n) {\n  return n.o = !1, t(e + \"\\n\\n\", n);\n}\n\nconst zt = (t, e, n) => ({\n  content: St(e, t[1], n)\n});\n\nfunction Et() {\n  return {};\n}\n\nfunction At() {\n  return null;\n}\n\nfunction Rt() {\n  for (var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++) {\n    t[_key] = arguments[_key];\n  }\n\n  return t.filter(Boolean).join(\" \");\n}\n\nfunction It(t, e, n) {\n  let r = t;\n  const o = e.split(\".\");\n\n  for (; o.length && (r = r[o[0]], void 0 !== r);) o.shift();\n\n  return r || n;\n}\n\nvar Mt;\n\nfunction Ot(n) {\n  let H = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  H.overrides = H.overrides || {}, H.slugify = H.slugify || _t, H.namedCodesToUnicode = H.namedCodesToUnicode ? e({}, o, H.namedCodesToUnicode) : o;\n  const q = H.createElement || t.createElement;\n\n  function U(t, n) {\n    const o = It(H.overrides, `${t}.props`, {});\n\n    for (var _len2 = arguments.length, r = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      r[_key2 - 2] = arguments[_key2];\n    }\n\n    return q(function (t, e) {\n      const n = It(e, t);\n      return n ? \"function\" == typeof n || \"object\" == typeof n && \"render\" in n ? n : It(e, `${t}.component`, t) : t;\n    }(t, H.overrides), e({}, n, o, {\n      className: Rt(null == n ? void 0 : n.className, o.className) || void 0\n    }), ...r);\n  }\n\n  function V(e) {\n    let n = !1;\n    H.forceInline ? n = !0 : H.forceBlock || (n = !1 === F.test(e));\n    const r = dt(ft(n ? e : `${e.trimEnd().replace(tt, \"\")}\\n\\n`, {\n      o: n\n    }));\n\n    for (; \"string\" == typeof r[r.length - 1] && !r[r.length - 1].trim();) r.pop();\n\n    if (null === H.wrapper) return r;\n    const o = H.wrapper || (n ? \"span\" : \"div\");\n    let c;\n    if (r.length > 1 || H.forceWrapper) c = r;else {\n      if (1 === r.length) return c = r[0], \"string\" == typeof c ? U(\"span\", {\n        key: \"outer\"\n      }, c) : c;\n      c = null;\n    }\n    return t.createElement(o, {\n      key: \"outer\"\n    }, c);\n  }\n\n  function W(e) {\n    const n = e.match(a);\n    return n ? n.reduce(function (e, n, o) {\n      const c = n.indexOf(\"=\");\n\n      if (-1 !== c) {\n        const a = function (t) {\n          return -1 !== t.indexOf(\"-\") && null === t.match(E) && (t = t.replace(T, function (t, e) {\n            return e.toUpperCase();\n          })), t;\n        }(n.slice(0, c)).trim(),\n              u = function (t) {\n          const e = t[0];\n          return ('\"' === e || \"'\" === e) && t.length >= 2 && t[t.length - 1] === e ? t.slice(1, -1) : t;\n        }(n.slice(c + 1).trim()),\n              i = r[a] || a,\n              l = e[i] = function (t, e) {\n          return \"style\" === t ? e.split(/;\\s?/).reduce(function (t, e) {\n            const n = e.slice(0, e.indexOf(\":\"));\n            return t[n.replace(/(-[a-z])/g, t => t[1].toUpperCase())] = e.slice(n.length + 1).trim(), t;\n          }, {}) : \"href\" === t ? bt(e) : (e.match(R) && (e = e.slice(1, e.length - 1)), \"true\" === e || \"false\" !== e && e);\n        }(a, u);\n\n        \"string\" == typeof l && ($.test(l) || A.test(l)) && (e[i] = t.cloneElement(V(l.trim()), {\n          key: o\n        }));\n      } else \"style\" !== n && (e[r[n] || n] = !0);\n\n      return e;\n    }, {}) : void 0;\n  }\n\n  const nt = [],\n        at = {},\n        lt = {\n    blockQuote: {\n      i: ht(l),\n      l: Mt.HIGH,\n      _: (t, e, n) => ({\n        content: e(t[0].replace(s, \"\"), n)\n      }),\n      p: (t, e, n) => U(\"blockquote\", {\n        key: n.g\n      }, e(t.content, n))\n    },\n    breakLine: {\n      i: kt(_),\n      l: Mt.HIGH,\n      _: Et,\n      p: (t, e, n) => U(\"br\", {\n        key: n.g\n      })\n    },\n    breakThematic: {\n      i: ht(f),\n      l: Mt.HIGH,\n      _: Et,\n      p: (t, e, n) => U(\"hr\", {\n        key: n.g\n      })\n    },\n    codeBlock: {\n      i: ht(p),\n      l: Mt.MAX,\n      _: t => ({\n        content: t[0].replace(/^ {4}/gm, \"\").replace(/\\n+$/, \"\"),\n        lang: void 0\n      }),\n      p: (t, e, n) => U(\"pre\", {\n        key: n.g\n      }, U(\"code\", {\n        className: t.lang ? `lang-${t.lang}` : \"\"\n      }, t.content))\n    },\n    codeFenced: {\n      i: ht(d),\n      l: Mt.MAX,\n      _: t => ({\n        content: t[3],\n        lang: t[2] || void 0,\n        type: \"codeBlock\"\n      })\n    },\n    codeInline: {\n      i: yt(g),\n      l: Mt.LOW,\n      _: t => ({\n        content: t[2]\n      }),\n      p: (t, e, n) => U(\"code\", {\n        key: n.g\n      }, t.content)\n    },\n    footnote: {\n      i: ht(h),\n      l: Mt.MAX,\n      _: t => (nt.push({\n        footnote: t[2],\n        identifier: t[1]\n      }), {}),\n      p: At\n    },\n    footnoteReference: {\n      i: mt(k),\n      l: Mt.HIGH,\n      _: t => ({\n        content: t[1],\n        target: `#${H.slugify(t[1])}`\n      }),\n      p: (t, e, n) => U(\"a\", {\n        key: n.g,\n        href: bt(t.target)\n      }, U(\"sup\", {\n        key: n.g\n      }, t.content))\n    },\n    gfmTask: {\n      i: mt(b),\n      l: Mt.HIGH,\n      _: t => ({\n        completed: \"x\" === t[1].toLowerCase()\n      }),\n      p: (t, e, n) => U(\"input\", {\n        checked: t.completed,\n        key: n.g,\n        readOnly: !0,\n        type: \"checkbox\"\n      })\n    },\n    heading: {\n      i: ht(v),\n      l: Mt.HIGH,\n      _: (t, e, n) => ({\n        content: St(e, t[2], n),\n        id: H.slugify(t[2]),\n        level: t[1].length\n      }),\n      p: (t, e, n) => (t.tag = `h${t.level}`, U(t.tag, {\n        id: t.id,\n        key: n.g\n      }, e(t.content, n)))\n    },\n    headingSetext: {\n      i: ht(S),\n      l: Mt.MAX,\n      _: (t, e, n) => ({\n        content: St(e, t[1], n),\n        level: \"=\" === t[2] ? 1 : 2,\n        type: \"heading\"\n      })\n    },\n    htmlComment: {\n      i: kt(z),\n      l: Mt.HIGH,\n      _: () => ({}),\n      p: At\n    },\n    image: {\n      i: yt(it),\n      l: Mt.HIGH,\n      _: t => ({\n        alt: t[1],\n        target: vt(t[2]),\n        title: t[3]\n      }),\n      p: (t, e, n) => U(\"img\", {\n        key: n.g,\n        alt: t.alt || void 0,\n        title: t.title || void 0,\n        src: bt(t.target)\n      })\n    },\n    link: {\n      i: mt(ut),\n      l: Mt.LOW,\n      _: (t, e, n) => ({\n        content: $t(e, t[1], n),\n        target: vt(t[2]),\n        title: t[3]\n      }),\n      p: (t, e, n) => U(\"a\", {\n        key: n.g,\n        href: bt(t.target),\n        title: t.title\n      }, e(t.content, n))\n    },\n    linkAngleBraceStyleDetector: {\n      i: mt(O),\n      l: Mt.MAX,\n      _: t => ({\n        content: [{\n          content: t[1],\n          type: \"text\"\n        }],\n        target: t[1],\n        type: \"link\"\n      })\n    },\n    linkBareUrlDetector: {\n      i: (t, e) => e.m ? null : mt(I)(t, e),\n      l: Mt.MAX,\n      _: t => ({\n        content: [{\n          content: t[1],\n          type: \"text\"\n        }],\n        target: t[1],\n        title: void 0,\n        type: \"link\"\n      })\n    },\n    linkMailtoDetector: {\n      i: mt(M),\n      l: Mt.MAX,\n\n      _(t) {\n        let e = t[1],\n            n = t[1];\n        return u.test(n) || (n = \"mailto:\" + n), {\n          content: [{\n            content: e.replace(\"mailto:\", \"\"),\n            type: \"text\"\n          }],\n          target: n,\n          type: \"link\"\n        };\n      }\n\n    },\n    list: {\n      i(t, e, n) {\n        const r = L.exec(n);\n        return !r || !e.h && e.o ? null : ct.exec(t = r[1] + t);\n      },\n\n      l: Mt.HIGH,\n\n      _(t, e, n) {\n        const r = t[2],\n              o = r.length > 1,\n              c = o ? +r : void 0,\n              a = t[0].replace(i, \"\\n\").match(ot);\n        let u = !1;\n        return {\n          items: a.map(function (t, r) {\n            const o = rt.exec(t)[0].length,\n                  c = new RegExp(\"^ {1,\" + o + \"}\", \"gm\"),\n                  i = t.replace(c, \"\").replace(rt, \"\"),\n                  l = r === a.length - 1,\n                  s = -1 !== i.indexOf(\"\\n\\n\") || l && u;\n            u = s;\n            const _ = n.o,\n                  f = n.h;\n            let d;\n            n.h = !0, s ? (n.o = !1, d = i.replace(B, \"\\n\\n\")) : (n.o = !0, d = i.replace(B, \"\"));\n            const p = e(d, n);\n            return n.o = _, n.h = f, p;\n          }),\n          ordered: o,\n          start: c\n        };\n      },\n\n      p: (t, e, n) => U(t.ordered ? \"ol\" : \"ul\", {\n        key: n.g,\n        start: t.start\n      }, t.items.map(function (t, r) {\n        return U(\"li\", {\n          key: r\n        }, e(t, n));\n      }))\n    },\n    newlineCoalescer: {\n      i: ht(m),\n      l: Mt.LOW,\n      _: Et,\n      p: () => \"\\n\"\n    },\n    paragraph: {\n      i: xt,\n      l: Mt.LOW,\n      _: zt,\n      p: (t, e, n) => U(\"p\", {\n        key: n.g\n      }, e(t.content, n))\n    },\n    ref: {\n      i: mt(C),\n      l: Mt.MAX,\n      _: t => (at[t[1]] = {\n        target: t[2],\n        title: t[4]\n      }, {}),\n      p: At\n    },\n    refImage: {\n      i: yt(D),\n      l: Mt.MAX,\n      _: t => ({\n        alt: t[1] || void 0,\n        ref: t[2]\n      }),\n      p: (t, e, n) => U(\"img\", {\n        key: n.g,\n        alt: t.alt,\n        src: bt(at[t.ref].target),\n        title: at[t.ref].title\n      })\n    },\n    refLink: {\n      i: mt(N),\n      l: Mt.MAX,\n      _: (t, e, n) => ({\n        content: e(t[1], n),\n        fallbackContent: e(t[0].replace(Z, \"\\\\$1\"), n),\n        ref: t[2]\n      }),\n      p: (t, e, n) => at[t.ref] ? U(\"a\", {\n        key: n.g,\n        href: bt(at[t.ref].target),\n        title: at[t.ref].title\n      }, e(t.content, n)) : U(\"span\", {\n        key: n.g\n      }, e(t.fallbackContent, n))\n    },\n    table: {\n      i: ht(j),\n      l: Mt.HIGH,\n      _: pt,\n      p: (t, e, n) => U(\"table\", {\n        key: n.g\n      }, U(\"thead\", null, U(\"tr\", null, t.header.map(function (r, o) {\n        return U(\"th\", {\n          key: o,\n          style: gt(t, o)\n        }, e(r, n));\n      }))), U(\"tbody\", null, t.cells.map(function (r, o) {\n        return U(\"tr\", {\n          key: o\n        }, r.map(function (r, o) {\n          return U(\"td\", {\n            key: o,\n            style: gt(t, o)\n          }, e(r, n));\n        }));\n      })))\n    },\n    tableSeparator: {\n      i: function (t, e) {\n        return e.t ? G.exec(t) : null;\n      },\n      l: Mt.HIGH,\n      _: function () {\n        return {\n          type: \"tableSeparator\"\n        };\n      },\n      p: () => \" | \"\n    },\n    text: {\n      i: kt(Y),\n      l: Mt.MIN,\n      _: t => ({\n        content: t[0].replace(w, (t, e) => H.namedCodesToUnicode[e] ? H.namedCodesToUnicode[e] : t)\n      }),\n      p: t => t.content\n    },\n    textBolded: {\n      i: yt(Q),\n      l: Mt.MED,\n      _: (t, e, n) => ({\n        content: e(t[2], n)\n      }),\n      p: (t, e, n) => U(\"strong\", {\n        key: n.g\n      }, e(t.content, n))\n    },\n    textEmphasized: {\n      i: yt(X),\n      l: Mt.LOW,\n      _: (t, e, n) => ({\n        content: e(t[2], n)\n      }),\n      p: (t, e, n) => U(\"em\", {\n        key: n.g\n      }, e(t.content, n))\n    },\n    textEscaped: {\n      i: yt(K),\n      l: Mt.HIGH,\n      _: t => ({\n        content: t[1],\n        type: \"text\"\n      })\n    },\n    textStrikethroughed: {\n      i: yt(J),\n      l: Mt.LOW,\n      _: zt,\n      p: (t, e, n) => U(\"del\", {\n        key: n.g\n      }, e(t.content, n))\n    }\n  };\n  !0 !== H.disableParsingRawHTML && (lt.htmlBlock = {\n    i: kt($),\n    l: Mt.HIGH,\n\n    _(t, e, n) {\n      const [, r] = t[3].match(et),\n            o = new RegExp(`^${r}`, \"gm\"),\n            a = t[3].replace(o, \"\"),\n            u = (i = a, st.some(t => t.test(i)) ? wt : St);\n      var i;\n      const l = t[1].toLowerCase(),\n            s = -1 !== c.indexOf(l);\n      n.m = n.m || \"a\" === l;\n\n      const _ = s ? t[3] : u(e, a, n);\n\n      return n.m = !1, {\n        attrs: W(t[2]),\n        content: _,\n        noInnerParse: s,\n        tag: s ? l : t[1]\n      };\n    },\n\n    p: (t, n, r) => U(t.tag, e({\n      key: r.g\n    }, t.attrs), t.noInnerParse ? t.content : n(t.content, r))\n  }, lt.htmlSelfClosing = {\n    i: kt(A),\n    l: Mt.HIGH,\n    _: t => ({\n      attrs: W(t[2] || \"\"),\n      tag: t[1]\n    }),\n    p: (t, n, r) => U(t.tag, e({}, t.attrs, {\n      key: r.g\n    }))\n  });\n\n  const ft = function (t) {\n    let e = Object.keys(t);\n\n    function n(r, o) {\n      let c = [],\n          a = \"\";\n\n      for (; r;) {\n        let u = 0;\n\n        for (; u < e.length;) {\n          const i = e[u],\n                l = t[i],\n                s = l.i(r, o, a);\n\n          if (s) {\n            const t = s[0];\n            r = r.substring(t.length);\n\n            const e = l._(s, n, o);\n\n            null == e.type && (e.type = i), c.push(e), a = t;\n            break;\n          }\n\n          u++;\n        }\n      }\n\n      return c;\n    }\n\n    return e.sort(function (e, n) {\n      let r = t[e].l,\n          o = t[n].l;\n      return r !== o ? r - o : e < n ? -1 : 1;\n    }), function (t, e) {\n      return n(function (t) {\n        return t.replace(y, \"\\n\").replace(x, \"\").replace(P, \"    \");\n      }(t), e);\n    };\n  }(lt),\n        dt = (Ot = function (t) {\n    return function (e, n, r) {\n      return t[e.type].p(e, n, r);\n    };\n  }(lt), function t(e) {\n    let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (Array.isArray(e)) {\n      const r = n.g,\n            o = [];\n      let c = !1;\n\n      for (let r = 0; r < e.length; r++) {\n        n.g = r;\n        const a = t(e[r], n),\n              u = \"string\" == typeof a;\n        u && c ? o[o.length - 1] += a : null !== a && o.push(a), c = u;\n      }\n\n      return n.g = r, o;\n    }\n\n    return Ot(e, t, n);\n  });\n\n  var Ot;\n  const Bt = V(n);\n  return nt.length ? U(\"div\", null, Bt, U(\"footer\", {\n    key: \"footer\"\n  }, nt.map(function (t) {\n    return U(\"div\", {\n      id: H.slugify(t.identifier),\n      key: t.identifier\n    }, t.identifier, dt(ft(t.footnote, {\n      o: !0\n    })));\n  }))) : Bt;\n}\n\n!function (t) {\n  t[t.MAX = 0] = \"MAX\", t[t.HIGH = 1] = \"HIGH\", t[t.MED = 2] = \"MED\", t[t.LOW = 3] = \"LOW\", t[t.MIN = 4] = \"MIN\";\n}(Mt || (Mt = {}));\nexport default (e => {\n  let {\n    children: r,\n    options: o\n  } = e,\n      c = function (t, e) {\n    if (null == t) return {};\n    var n,\n        r,\n        o = {},\n        c = Object.keys(t);\n\n    for (r = 0; r < c.length; r++) e.indexOf(n = c[r]) >= 0 || (o[n] = t[n]);\n\n    return o;\n  }(e, n);\n\n  return t.cloneElement(Ot(r, o), c);\n});\nexport { Ot as compiler };","map":{"version":3,"mappings":"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","names":["ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","for","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_PREFIX_R","RegExp","LIST_ITEM_R","LIST_R","LINK_INSIDE","LINK_R","IMAGE_R","NON_PARAGRAPH_BLOCK_SYNTAXES","BLOCK_SYNTAXES","slugify","str","replace","parseTableAlignCapture","alignCapture","test","parseTableRow","source","parse","state","prevInTable","_inTable","tableRow","trim","cells","forEach","node","i","type","length","push","content","parseTable","capture","_inline","header","align","split","map","rowText","parseTableCells","getTableStyle","colIndex","textAlign","inlineRegex","regex","exec","simpleInlineRegex","_simple","blockRegex","anyScopeRegex","matchParagraph","prevCapturedString","endsWith","match","every","line","some","captured","trimEnd","sanitizeUrl","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","result","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","cx","args","filter","Boolean","join","get","src","path","fb","ptr","frags","undefined","shift","Priority","compiler","markdown","options","overrides","createElementFn","createElement","React","h","tag","props","children","overrideProps","override","getTag","className","compile","input","forceInline","forceBlock","arr","emitter","parser","pop","wrapper","jsx","forceWrapper","key","attrStringToMap","attributes","raw","index","delimiterIdx","indexOf","_","letter","toUpperCase","normalizeAttributeKey","slice","value","first","unquote","mappedKey","normalizedValue","styles","kvPair","substr","attributeValueToJSXPropValue","cloneElement","footnotes","refs","rules","blockQuote","_match","_order","HIGH","_parse","_react","output","_key","breakLine","__","breakThematic","codeBlock","MAX","lang","codeFenced","codeInline","LOW","footnote","identifier","footnoteReference","target","href","gfmTask","completed","checked","readOnly","heading","id","level","headingSetext","htmlComment","image","alt","title","link","linkAngleBraceStyleDetector","linkBareUrlDetector","_inAnchor","linkMailtoDetector","address","list","prevCapture","isStartOfLine","_list","bullet","ordered","start","items","lastItemWasAParagraph","item","space","spaceRegex","isLastItem","thisItemIsAParagraph","oldStateInline","oldStateList","adjustedContent","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","style","row","c","tableSeparator","text","MIN","full","inner","textBolded","MED","textEmphasized","textEscaped","textStrikethroughed","disableParsingRawHTML","htmlBlock","whitespace","trimmer","trimmed","parseFunc","r","tagName","noInnerParse","attrs","htmlSelfClosing","ruleList","Object","keys","nestedParse","ruleType","rule","currCaptureString","substring","parsed","sort","typeA","typeB","orderA","orderB","normalizeWhitespace","parserFor","outputFunc","ast","ruleOutput","nestedReactOutput","Array","isArray","oldKey","lastWasString","nodeOut","isString","def","_ref"],"sources":["/Users/siddharthkhatri/Developer/React JS/phone-book/node_modules/markdown-to-jsx/index.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _inAnchor?: boolean\n    _inline?: boolean\n    _inTable?: boolean\n    _key?: React.Key\n    _list?: boolean\n    _simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: Priority\n    _parse: MarkdownToJSX.Parser<ParserOutput>\n    _react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.Props<any>,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entites are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce((obj, x) => ((obj[x.toLowerCase()] = x), obj), { for: 'htmlFor' })\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  '^' +\n    LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_COMMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state._inTable\n  state._inTable = true\n  const tableRow = parse(source.trim(), state)\n  state._inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state._inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state._inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: JSX.IntrinsicAttributes,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type]._order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA]._order\n    let orderB = rules[typeB]._order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule._match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule._parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state._inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state._inline || state._simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state._key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state._key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state._key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = true\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = false\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  content,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  state._inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<ReturnType<typeof parseInline>> =\n  (capture, parse, state: MarkdownToJSX.State) => {\n    return {\n      content: parseInline(parse, capture[1], state),\n    }\n  }\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type]._react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          _inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): React.Props<any> {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function (map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[mappedKey] =\n              attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              )\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <blockquote key={state._key}>\n            {output(node.content, state)}\n          </blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <br key={state._key} />\n      },\n    },\n\n    breakThematic: {\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <hr key={state._key} />\n      },\n    },\n\n    codeBlock: {\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      _react(node, output, state) {\n        return (\n          <pre key={state._key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return <code key={state._key}>{node.content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    footnoteReference: {\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a key={state._key} href={sanitizeUrl(node.target)}>\n            <sup key={state._key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state._key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    heading: {\n      _match: blockRegex(HEADING_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      _react(node, output, state) {\n        node.tag = `h${node.level}` as MarkdownToJSX.HTMLTags\n        return (\n          <node.tag id={node.id} key={state._key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      id: string\n      level: number\n      tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    image: {\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a\n            key={state._key}\n            href={sanitizeUrl(node.target)}\n            title={node.title}\n          >\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      target: string\n      title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      _match: (source, state) => {\n        if (state._inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      _match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state._list || !state._inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function (item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state._inline depending\n          // on our list's looseness.\n          const oldStateInline = state._inline\n          const oldStateList = state._list\n          state._list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state._inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state._inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state._inline = oldStateInline\n          state._list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      _react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state._key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      items: MarkdownToJSX.ParserResult[]\n      ordered: boolean\n      start?: number\n    }>,\n\n    newlineCoalescer: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      _match: matchParagraph,\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <p key={state._key}>{output(node.content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    refImage: {\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state._key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state._key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      fallbackContent: MarkdownToJSX.ParserResult\n      ref: string\n    }>,\n\n    table: {\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _react(node, output, state) {\n        return (\n          <table key={state._key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      _match: function (source, state) {\n        if (!state._inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      _order: Priority.HIGH,\n      _parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      _react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      _react(node /*, output, state*/) {\n        return node.content\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    textBolded: {\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <strong key={state._key}>{output(node.content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <em key={state._key}>{output(node.content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <del key={state._key}>{output(node.content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key]._match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key]._parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state._inAnchor = state._inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state._inAnchor = false\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          content,\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state._key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as MarkdownToJSX.ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<MarkdownToJSX.NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return <node.tag {...node.attrs} key={state._key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def.identifier)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { _inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.Props<any>\n  )\n}\n\nexport default Markdown\n"]},"metadata":{},"sourceType":"module"}